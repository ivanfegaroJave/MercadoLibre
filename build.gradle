plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.co'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.1.0.RELEASE'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-netflix-hystrix-dashboard', version: '2.2.3.RELEASE'
	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.3.RELEASE'
	// --- Test Dependencies ---
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

	// Mockito
	testImplementation('org.mockito:mockito-junit-jupiter:2.24.0')
	testImplementation('org.mockito:mockito-core:2.24.0')

	testImplementation('net.bytebuddy:byte-buddy:1.9.10')



}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
		html.destination file("$buildDir/reports/jacoco")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/configuration/**',
							  '**/domain/**',
							  '**/crosscuting/**'
					]
			)
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

